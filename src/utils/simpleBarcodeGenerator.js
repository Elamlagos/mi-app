/**
 * üöÄ GENERADOR OPTIMIZADO PARA PORTAOBJETOS
 * Configurado para impresi√≥n peque√±a con m√°xima legibilidad
 */

export class SimpleBarcodeGenerator {
  
  /**
   * Genera un c√≥digo de barras optimizado para portaobjetos
   * @param {string|number} plateId - ID num√©rico de la placa (6 d√≠gitos)
   * @param {string} visualId - ID visual para mostrar (ej: T01-S02-001)
   * @returns {Promise<string>} Base64 del c√≥digo generado
   */
  static async generateBarcode(plateId, visualId) {
    return new Promise((resolve, reject) => {
      try {
        console.log('üîÑ Generando c√≥digo optimizado para portaobjetos...');
        console.log('üìã Datos:', { plateId, visualId });

        // PASO 1: Verificar que JsBarcode est√© disponible
        if (!window.JsBarcode || !window.BARCODE_SYSTEM_READY) {
          throw new Error('Sistema de c√≥digos no disponible. Recarga la p√°gina.');
        }

        // PASO 2: Validar datos de entrada
        const plateIdStr = plateId.toString();
        if (!/^\d{6}$/.test(plateIdStr)) {
          throw new Error(`ID de placa inv√°lido: ${plateIdStr}. Debe ser de 6 d√≠gitos.`);
        }

        // PASO 3: Crear canvas optimizado para portaobjetos
        const canvas = document.createElement('canvas');
        canvas.width = 400;   // Ancho optimizado
        canvas.height = 120;  // Altura compacta

        // PASO 4: üéØ CONFIGURACI√ìN OPTIMIZADA PARA PORTAOBJETOS
        const config = {
          format: "CODE128",           // Formato m√°s denso y confiable
          width: 4,                    // ‚úÖ BARRAS M√ÅS GRUESAS (antes 2.5, ahora 4)
          height: 50,                  // ‚úÖ Altura perfecta para portaobjetos
          displayValue: true,          // Mostrar n√∫mero legible
          text: visualId,              // ‚úÖ C√ìDIGO VISUAL ARRIBA
          fontSize: 40,                // ‚úÖ LETRAS M√ÅS GRANDES (antes 12, ahora 18)
          fontOptions: "bold",         // ‚úÖ NEGRITA para mejor legibilidad
          textAlign: "center",         // Texto centrado
          textPosition: "top",         // ‚úÖ TEXTO ARRIBA de las barras
          textMargin: 3,              // Espacio entre texto y barras
          background: "#ffffff",       // Fondo blanco puro
          lineColor: "#000000",        // L√≠neas negras puras para m√°ximo contraste
          margin: 12,                  // M√°rgenes para impresi√≥n
          marginTop: 5,                // Margen superior reducido
          marginBottom: 10             // Margen inferior para ID num√©rico
        };

        console.log('‚öôÔ∏è Configuraci√≥n optimizada aplicada:', config);

        // PASO 5: Generar el c√≥digo principal
        window.JsBarcode(canvas, plateIdStr, config);

        // PASO 6: Agregar el ID num√©rico DEBAJO del c√≥digo
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#000000';
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'center';
        
        // Posicionar el ID num√©rico en la parte inferior
        const textY = canvas.height - 6;
        ctx.fillText(plateIdStr, canvas.width / 2, textY);

        // PASO 7: Convertir a base64 con m√°xima calidad
        const dataUrl = canvas.toDataURL('image/png', 1.0);
        const base64Data = dataUrl.split(',')[1];

        // PASO 8: Validar resultado
        if (!base64Data || base64Data.length < 100) {
          throw new Error('C√≥digo generado inv√°lido o vac√≠o');
        }

        console.log('‚úÖ C√≥digo optimizado para portaobjetos generado exitosamente');
        console.log('üñ®Ô∏è Listo para imprimir peque√±o y ser legible');
        
        resolve(base64Data);

      } catch (error) {
        console.error('‚ùå Error en generaci√≥n:', error);
        reject(new Error(`Error generando c√≥digo: ${error.message}`));
      }
    });
  }

  /**
   * Espera a que el sistema est√© listo
   * @param {number} maxWait - Tiempo m√°ximo de espera en ms
   * @returns {Promise<boolean>}
   */
  static async waitForSystem(maxWait = 5000) {
    return new Promise((resolve, reject) => {
      const startTime = Date.now();
      
      console.log('‚è≥ Esperando sistema de c√≥digos...');
      
      const checkSystem = () => {
        if (window.JsBarcode && window.BARCODE_SYSTEM_READY) {
          console.log('‚úÖ Sistema listo');
          resolve(true);
        } else if (Date.now() - startTime > maxWait) {
          console.error('‚ùå Timeout esperando sistema');
          reject(new Error('Timeout: Sistema de c√≥digos no disponible'));
        } else {
          setTimeout(checkSystem, 100);
        }
      };
      
      checkSystem();
    });
  }

  /**
   * Verifica si el sistema est√° listo sin esperar
   * @returns {boolean}
   */
  static isSystemReady() {
    return !!(window.JsBarcode && window.BARCODE_SYSTEM_READY);
  }

  /**
   * Genera un c√≥digo de prueba para verificar funcionamiento
   * @returns {Promise<string>}
   */
  static async generateTestCode() {
    console.log('üß™ Generando c√≥digo de prueba optimizado...');
    return this.generateBarcode('123456', 'TEST-001');
  }

  /**
   * Informaci√≥n del sistema
   * @returns {object}
   */
  static getSystemInfo() {
    return {
      jsBarcode: !!window.JsBarcode,
      version: window.JsBarcode?.VERSION || 'Desconocida',
      systemReady: !!window.BARCODE_SYSTEM_READY,
      optimizedFor: 'Portaobjetos - Impresi√≥n peque√±a',
      features: [
        'C√≥digo visual arriba en letras grandes',
        'Barras gruesas para mejor lectura',
        'ID num√©rico abajo',
        'Optimizado para 70x20mm'
      ],
      timestamp: new Date().toISOString()
    };
  }
}

// Exportar tambi√©n como default para flexibilidad
export default SimpleBarcodeGenerator;

console.log('üì¶ SimpleBarcodeGenerator OPTIMIZADO cargado');
console.log('üéØ Configuraci√≥n: C√≥digo visual arriba (18px bold), barras gruesas (4px), ID abajo');
console.log('üñ®Ô∏è Perfecto para portaobjetos de ~70x20mm');